scalar DateTime
scalar Date
scalar Time

type Source {
    id: Int!
    name: String!
}

type Log {
    source: Source!
    text: String!
    rowid: Int!
    timestamp: DateTime!
}

type SystemInfo {
    darkModeEnabled: Boolean!
    websocketPort: Int
    executablePath: String!
}

enum SystemEvent {
    NEW_TAB
    CLOSE_TAB
    NEW_WINDOW
}

type Query {
    numCpus: Int!
    logs(sourceId: Int!, limit: Int!, beforeRowId: Int, filter: String): [Log!]!
    source: [Source!]!
    numLogs(sourceId: Int!, beforeRowId: Int, filter: String): Int!
    suggest(sourceId: Int!, prefix: String!, limit: Int, offset: Int): [String!]!
    systemInfo: SystemInfo!
}

type Subscription {
    logs(sourceId: Int!, filter: String): Log
    systemInfo: SystemInfo
    systemEvent: SystemEvent
    source: [Source!]!
}

input SourceInput {
    name: String!
}

type Mutation {
    createSource(source: SourceInput!): Source
    renameSource(id: Int!, name: String!): Source
    deleteSource(id: Int!): Int!
}
